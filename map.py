from parameters import *
from numba.core import types
from numba.typed import Dict
from numba import int32
from numba import njit
import pygame
from random import choice

# тут создается карта и всё связанное с ней
_ = False

map_y = [
    [
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, _, _, _, _, _, 2, _, _, 2, 2, _, _, 1, 1, 1, _, _, _, _, _, 1, 1],
        [1, 2, 2, 2, _, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, 4, _, _, 1],
        [1, _, _, _, _, _, _, _, _, _, _, 2, 2, _, _, _, _, _, _, _, _, _, 1],
        [1, _, 2, 2, _, _, _, _, _, _, _, _, 2, _, _, _, _, 4, _, _, 4, _, 1],
        [1, _, 3, _, _, _, 4, _, _, 2, _, _, 2, 2, 2, 2, _, _, 4, _, _, _, 1],
        [1, _, 3, _, _, _, 2, _, _, 2, 2, _, 2, _, _, _, _, _, _, _, 4, _, 1],
        [1, _, _, 3, _, _, 2, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, _],
        [1, _, 3, _, _, _, _, _, _, _, 3, _, _, 4, 4, _, _, 3, 3, 3, _, _, 1],
        [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
        [1, _, _, _, _, _, 3, _, 2, 2, _, _, _, _, 2, _, _, _, _, _, 2, 2, 1],
        [1, _, _, _, _, _, 3, _, _, _, _, _, _, _, 2, 2, 2, _, _, _, 2, _, 1],
        [1, _, _, _, _, 3, 3, 3, 3, _, _, _, _, 2, 2, _, _, _, _, _, _, _, 1],
        [1, _, 3, _, _, _, _, _, _, _, 3, _, _, _, _, _, _, _, 3, 3, _, _, 1],
        [1, _, _, _, _, _, _, 1, _, _, 4, _, _, _, _, _, _, _, _, 2, _, _, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    ],
    [
        [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, _, _, _, _, _, 2, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
        [1, 2, 2, _, _, _, _, _, _, 2, 2, 2, _, _, 1, _, 4, 4, 4, 4, 4, _, 1],
        [1, _, _, _, _, _, _, _, _, _, _, 2, 2, _, 1, _, _, _, _, _, 4, _, 1],
        [1, _, _, 2, _, _, _, _, _, _, _, _, 2, _, _, _, _, _, 2, _, 4, _, 1],
        [1, _, 3, _, _, _, 2, _, _, 2, 2, _, 2, _, _, _, _, _, _, _, 4, _, 1],
        [1, _, _, 3, _, _, 2, _, _, _, 1, _, _, _, _, _, _, _, _, _, _, _, 1],
        [_, _, 3, _, _, _, 2, 2, _, _, 3, _, _, _, _, _, _, 3, 3, 3, _, _, _],
        [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
        [1, _, _, _, _, _, _, _, _, 4, 4, 4, _, _, 4, 4, 4, _, _, _, 2, _, 1],
        [1, _, _, 1, 1, _, 4, 4, 4, 4, _, _, _, _, _, _, _, _, _, _, 2, _, 1],
        [1, _, _, _, _, _, _, _, _, 4, _, _, _, _, _, 1, 1, 1, _, _, 2, _, 1],
        [1, 2, 1, _, _, _, _, 1, _, _, _, _, _, _, _, 1, _, _, _, 2, 2, _, 1],
        [1, _, 3, _, _, _, 4, _, _, 2, _, _, 2, _, 1, 1, _, _, 4, _, _, _, 1],
        [1, _, _, _, _, _, _, 1, _, _, 4, _, _, _, _, _, _, _, _, _, _, _, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    ],
    [
        [3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, _, _, _, _, _, 2, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
        [1, 2, _, 2, _, _, _, _, _, 2, 2, 2, _, _, _, _, _, 3, _, 4, _, _, 1],
        [1, _, _, _, _, _, 1, 1, _, 2, _, _, _, _, _, _, 3, _, _, _, _, _, 1],
        [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 3, _, _, _, 4, _, 1],
        [1, _, _, _, _, _, 2, _, _, 2, 2, _, 3, 3, 3, 3, 3, _, _, _, 4, _, 1],
        [1, _, _, 3, 3, _, 2, _, _, _, 1, _, 3, _, _, _, _, _, _, _, _, _, 1],
        [_, _, 3, _, _, _, _, _, _, _, 3, _, 3, _, _, _, _, 3, 3, 3, _, _, 1],
        [1, _, 3, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1],
        [1, _, 3, _, _, _, _, 1, 1, 1, _, _, _, 3, 3, 3, _, 3, _, _, _, _, 1],
        [1, _, _, _, _, _, _, _, _, _, _, _, _, _, _, 1, 3, 3, _, _, _, _, 1],
        [1, _, 4, 4, 4, 4, 4, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, _, 1],
        [1, _, 4, _, _, _, 4, 2, _, 2, 4, 4, 4, _, _, 1, _, _, _, 2, _, _, 1],
        [1, _, _, _, _, _, 4, _, _, 2, _, _, _, _, _, _, _, 1, 4, _, _, _, 1],
        [1, _, _, 1, 1, _, _, _, _, 2, 4, _, _, _, _, _, _, _, _, 2, _, _, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
    ]
]

#  координаты стен

# x = len(map_y)
#
# z_map = []
#
# for i in range(x):
#    while len(z_map) != x:
#        world_map = choice(map_y)
#        if world_map not in z_map:
#            z_map.append(world_map)
# a_map = z_map[0]
#
# for i in range(1, x):
#    for j in range(len(a_map)):
#        a_map[j] += z_map[i][j]
new_maps = map_y[0]
x = len(map_y)
for i in range(1, x):
    for j in range(len(new_maps)):
        new_maps[j] += map_y[i][j]

W_WORLD = len(new_maps[0]) * CELL
H_WORLD = len(new_maps) * CELL
mini_map = set()
txt_map = Dict.empty(key_type=types.UniTuple(int32, 2), value_type=int32)
collision_walls = []

for j, row in enumerate(new_maps):
    for i, char in enumerate(row):
        if char:
            mini_map.add((i * MAP_CELL, j * MAP_CELL))
            collision_walls.append(pygame.Rect(i * CELL, j * CELL, CELL, CELL))
            if char == 1:
                txt_map[(i * CELL, j * CELL)] = 1
            elif char == 2:
                txt_map[(i * CELL, j * CELL)] = 2
            elif char == 3:
                txt_map[(i * CELL, j * CELL)] = 3
            elif char == 4:
                txt_map[(i * CELL, j * CELL)] = 4


class Camera:
    def __init__(self, monitor_map, gamer):
        self.gamer = gamer
        self.monitor_map = monitor_map
        self.dx = 0

    def update(self):
        self.dx = -(self.gamer.minirect.x + self.gamer.minirect.w // 2  - MAP_RES[0] // 20) 

    def apply(self, x, y):
        x += self.dx
        pygame.draw.rect(self.monitor_map, DARKORANGE, (x, y, MAP_CELL, MAP_CELL), 2)